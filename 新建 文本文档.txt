项目概述
本项目是一个网络流量数据预处理的Python脚本，主要用于处理CIC2017和CICDDoS2019两个数据集，对原始网络流量数据进行清洗、标签处理、特征工程和数据集划分，并将处理后的结果保存为CSV文件和元数据JSON文件。该项目旨在为后续的网络攻击检测模型提供高质量的训练和测试数据。
 功能模块
1. 配置参数类（`Config`）
- **数据路径配置**：存储多个原始数据文件的路径，包括CIC2017和CICDDoS2019数据集的各个文件。
- **攻击类型标签映射**：定义了攻击类型与数字编码的映射关系，用于将文本标签转换为数字标签。
- **处理参数**：包括输出路径、测试集比例、随机种子、每个类别最小样本数以及分类特征列名。
2. 数据预处理类（`DataPreprocessor`）
- **`load_data` 方法**：
  - 加载并合并多个数据文件，使用 `pandas` 的 `read_csv` 函数读取文件。
  - 统一标签列名为 `Label`，并删除标签列中的缺失值。
  - 处理加载过程中的异常，输出加载成功或失败的信息。
- **`clean_data` 方法**：
  - 删除全零列，减少数据的冗余。
  - 处理数值列的缺失值，使用中位数填充。
  - 处理无穷值，将其替换为 `NaN`，并使用前向和后向填充方法处理。
- **`process_labels` 方法**：
  - 应用标签映射，将文本标签转换为数字标签。
  - 过滤未映射的标签，确保所有标签都是有效的。
  - 过滤稀有类别，只保留样本数大于等于指定阈值的类别。
- **`process_features` 方法**：
  - 对分类特征进行编码，使用 `LabelEncoder` 将分类特征转换为数值特征。
  - 对数值特征进行归一化，使用 `MinMaxScaler` 将数值特征缩放到 [0, 1] 区间。
- **`split_data` 方法**：
  - 使用分层抽样的方法将数据集划分为训练集和测试集，确保每个类别的样本在训练集和测试集中的比例相同。
- **`save_results` 方法**：
  - 创建输出目录，将处理后的训练集和测试集保存为CSV文件。
  - 保存元数据，包括特征列名、标签映射、训练集和测试集的样本数以及标签分布。
- **`run_pipeline` 方法**：
  - 执行完整的数据处理流程，依次调用上述各个方法。
  - 处理过程中出现异常时，输出错误信息。
3. 主函数（`main`）
- 创建配置对象和数据预处理对象。
- 调用 `run_pipeline` 方法执行数据处理流程。
- 根据处理结果输出相应的提示信息。
代码使用方法
1. **配置参数**：在 `Config` 类中修改数据路径、输出路径、测试集比例等参数。
2. **运行脚本**：在命令行中运行 `python pythn.py`（注意：文件名可能需要修正为正确的文件名）。
3. **查看结果**：处理后的训练集和测试集将保存为CSV文件，元数据将保存为JSON文件，位于指定的输出目录中。
依赖库
- `os`：用于文件和目录操作。
- `pandas`：用于数据处理和分析。
- `numpy`：用于数值计算。
- `sklearn`：用于数据预处理和数据集划分。
- `tqdm`：用于显示进度条。
- `json`：用于保存和加载JSON文件。
- `warnings`：用于忽略警告信息。